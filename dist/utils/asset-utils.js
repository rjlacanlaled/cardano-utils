"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintNFTTokenTransaction = exports.mintNativeTokenTransaction = void 0;
const cardano_multiplatform_lib_nodejs_1 = __importDefault(require("@dcspark/cardano-multiplatform-lib-nodejs"));
const tx_utils_1 = require("./tx-utils");
const mintNativeTokenTransaction = (privKey, changeAddress, name, totalSupply, ttlSlot, protocolParameters, utxos) => {
    const nativeScripts = cardano_multiplatform_lib_nodejs_1.default.NativeScripts.new();
    const scriptPubKey = cardano_multiplatform_lib_nodejs_1.default.NativeScript.new_script_pubkey(cardano_multiplatform_lib_nodejs_1.default.ScriptPubkey.new(cardano_multiplatform_lib_nodejs_1.default.PrivateKey.from_bech32(privKey).to_public().hash()));
    const scriptTtl = cardano_multiplatform_lib_nodejs_1.default.NativeScript.new_timelock_expiry(cardano_multiplatform_lib_nodejs_1.default.TimelockExpiry.new(cardano_multiplatform_lib_nodejs_1.default.BigNum.from_str(ttlSlot)));
    nativeScripts.add(scriptPubKey);
    nativeScripts.add(scriptTtl);
    const mintScript = cardano_multiplatform_lib_nodejs_1.default.NativeScript.new_script_all(cardano_multiplatform_lib_nodejs_1.default.ScriptAll.new(nativeScripts));
    const policyId = Buffer.from(mintScript.hash(0).to_bytes()).toString('hex');
    console.log({ policyId });
    const assetName = cardano_multiplatform_lib_nodejs_1.default.AssetName.new(Buffer.from(name, 'utf-8'));
    const assetSupply = cardano_multiplatform_lib_nodejs_1.default.Int.new_i32(totalSupply);
    const txBuilder = (0, tx_utils_1.getTransactionBuilder)(protocolParameters);
    txBuilder.add_mint_asset(mintScript, assetName, assetSupply);
    txBuilder.add_inputs_from(utxos, 0);
    txBuilder.set_ttl(cardano_multiplatform_lib_nodejs_1.default.BigNum.from_str(ttlSlot));
    txBuilder.add_change_if_needed(cardano_multiplatform_lib_nodejs_1.default.Address.from_bech32(changeAddress));
    const txBody = txBuilder.build();
    const txHash = cardano_multiplatform_lib_nodejs_1.default.hash_transaction(txBody);
    const witnesses = cardano_multiplatform_lib_nodejs_1.default.TransactionWitnessSet.new();
    const vkeyWitnesses = cardano_multiplatform_lib_nodejs_1.default.Vkeywitnesses.new();
    const vkeyWitness = cardano_multiplatform_lib_nodejs_1.default.make_vkey_witness(txHash, cardano_multiplatform_lib_nodejs_1.default.PrivateKey.from_bech32(privKey));
    vkeyWitnesses.add(vkeyWitness);
    witnesses.set_vkeys(vkeyWitnesses);
    const mintNativeScripts = cardano_multiplatform_lib_nodejs_1.default.NativeScripts.new();
    mintNativeScripts.add(mintScript);
    witnesses.set_native_scripts(mintNativeScripts);
    const tx = cardano_multiplatform_lib_nodejs_1.default.Transaction.new(txBody, witnesses, undefined);
    console.log({ txHash: txHash.to_hex() });
    return tx;
};
exports.mintNativeTokenTransaction = mintNativeTokenTransaction;
const mintNFTTokenTransaction = () => { };
exports.mintNFTTokenTransaction = mintNFTTokenTransaction;
//# sourceMappingURL=asset-utils.js.map